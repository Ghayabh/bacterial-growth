#' @examples
#' Gamma_aw_2p(0.92,0.90,0.097)
Gamma_aw_2p <- function(aw,awmin,muopt)
{sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - awmin)^2 / (1 - awmin)^2)
return((sqrtmumax^2))
}
Gamma_aw_2p(0.92,0.90,0.097)
Gamma_aw_2p(0.92,0.90,0.037)
Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p(0.95,0.90, 0.98, 0.04)
Gamma_aw_3p(0.95,0.90, 0.99, 0.04)
Gamma_T(10,4,20,37,0.037)
Gamma_T(10,4,20,37,0.037)
Gamma_T(10,4,20,37,0.5)
Gamma_T(10,4,20,37,1)
Gamma_T(10,4,20,37,2)
Gamma_T(15,4,20,37,2)
Gamma_T(15,4,20,37,0.5)
library(devtools)
library(pmicrobiologyfunction)
install.packages("devtools")
library(devtools)
install_github("GhayaBH/pmicrobiologyfunction")
#' @param pHmin minimal groMh pH #a number
#' @param pHmax Maximal growth pH #a number
#' @param muopt Optimal growth rate # a number
#' @param pHopt Optimal growth pH #a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_pH_4p(5,4,9,0.5,7)
Gamma_pH_4p<- function(pH,pHmin,pHmax,muopt,pHopt)
{sqrtmumax<-sqrt(((pH >= pHmin) & (pH <= pHmax)) * muopt
*(pH - pHmin) * (pH - pHmax) / ((pH - pHmin) * (pH - pHmax) - (pH - pHopt)^2))
return((sqrtmumax^2))
}
Gamma_pH_4p(5,4,9,0.5,7)
Gamma_pH_4p(5,4,9,0.5,7)
#' this function of secondary growth model describe the evolution of the square root of the maximum specific growth rate (sqrtmumax) as a function of pH, This is a symetric cardinal pH model developped by Rosso & al.in 1995  with three parameters (pHmin, pHopt, muopt), obtained by fixing pHmax =2
#'
#' @param pH # a number
#' @param pHmin Minimal growth pH #a number
#' @param pHopt Optimal growth pH #a number
#' @param muopt Optimal growth rate # a number
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
Gamma_pH_3p <- function(pH,pHmin,muopt,pHopt)
{sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin)) * muopt
* (pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) / ((pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) - (pH - pHopt)^2)))
return((sqrtmumax^2))
}
pH=5
pHmin <- 3
muopt<-2
pHopt<-7
sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin)) * muopt
* (pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) / ((pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) - (pH - pHopt)^2)))
sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin))
sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin)))
sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin))))
sqrtmumax
pH<-2
sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin))))
sqrtmumax
#' this function of secondary growth model describe the evolution of the square root of the maximum specific growth rate (sqrtmumax) as a function of pH, This is a symetric cardinal pH model developped by Rosso & al.in 1995  with three parameters (pHmin, pHopt, muopt), obtained by fixing pHmax =2
#'
#' @param pH # a number
#' @param pHmin Minimal growth pH #a number
#' @param pHopt Optimal growth pH #a number
#' @param muopt Optimal growth rate # a number
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
Gamma_pH_3p <- function(pH,pHmin,muopt,pHopt)
{sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin))) * muopt
* (pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) / ((pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) - (pH - pHopt)^2)))
return((sqrtmumax^2))
}
source('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/R/Gamma_pH_3p.R', echo=TRUE)
#' this function of secondary growth model describe the evolution of the square root of the maximum specific growth rate (sqrtmumax) as a function of pH, This is a symetric cardinal pH model developped by Rosso & al.in 1995  with three parameters (pHmin, pHopt, muopt), obtained by fixing pHmax =2
#'
#' @param pH # a number
#' @param pHmin Minimal growth pH #a number
#' @param pHopt Optimal growth pH #a number
#' @param muopt Optimal growth rate # a number
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
Gamma_pH_3p <- function(pH,pHmin,muopt,pHopt)
{sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin))) * muopt
* (pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) / ((pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) - (pH - pHopt)^2))
return((sqrtmumax^2))
}
pHopt<-7
pH<-2
pHmin<-
pHmin<-2
Gamma_pH_3p(5,3,2,7)
Gamma_pH_3p(5,3,0.037,7)
Gamma_pH_3p(2,3,0.037,7)
Gamma_pH_3p(7,3,0.037,7)
Gamma_pH_3p(11,3,0.037,7)
Gamma_pH_3p(7,3,0.037,7)
devtools::use_testthat()
devtools::use_testthat()
usethis::use_testthat()
#' this function of secondary growth model describe the evolution of the square root of the maximum specific growth rate (sqrtmumax) as a function of pH, This is a symetric cardinal pH model developped by Rosso & al.in 1995  with three parameters (pHmin, pHopt, muopt), obtained by fixing pHmax =2
#'
#' @param pH # a number
#' @param pHmin Minimal growth pH #a number
#' @param pHopt Optimal growth pH #a number
#' @param muopt Optimal growth rate # a number
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
Gamma_pH_3p <- function(pH,pHmin,muopt,pHopt)
{sqrtmumax<-sqrt(((pH >= pHmin) & (pH <=(2 * pHopt- pHmin))) * muopt
* (pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) / ((pH - pHmin) * (pH - ((2 * pHopt) - pHmin)) - (pH - pHopt)^2))
return((sqrtmumax^2))
}
testthat
?testInheritedMethods
?testthat
Gamma_pH_3p(5,4,0.5,7)
Gamma_pH_3p(4,4,0.2,7)
Gamma_pH_3p(7,4,2,7)
library(testthat)
library(testthat)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(5,4,0.5,7),0.277)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
}
)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(5,4,0.5,7),0.2777778)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
}
)
Gamma_pH_3p(5,4,0.5,7)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(5,4,0.5,7),0.2777778)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
}
)
Gamma_pH_3p(7,4,2,7)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
}
)
Gamma_pH_3p(5,3,1,7)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
test_check("pmicrobiologyfunction")
library(testthat)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
test_check("pmicrobiologyfunction")
source('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/tests/testthat.R', echo=TRUE)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
library(testthat)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
test_check("pmicrobiologyfunction")
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
library(testthat)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
library(testthat)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
source('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/tests/testthat.R', echo=TRUE)
devtools::check()
devtools::test()
library(testthat)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
library(testthat)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal (Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
source('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/tests/testthat.R', echo=TRUE)
devtools::test()
test_that("Cheking the model Gamma_pH_3p",
{expect_equal(Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
context(Gamma_pH_3p)
library(testthat)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
library(testthat)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal(Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
test_check("pmicrobiologyfunction")
context(Gamma_pH_3p)
library(pmicrobiologyfunction)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal(Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
test_check("pmicrobiologyfunction")
context(pmicrobiologyfunction)
context(pmicrobiologyfunction)
context(Gamma_pH_3p)
library(pmicrobiologyfunction)
test_that("Cheking the model Gamma_pH_3p",
{expect_equal(Gamma_pH_3p(7,4,2,7),2)
expect_equal(Gamma_pH_3p(4,4,0.2,7),0)
expect_equal(Gamma_pH_3p(5,3,1,7),0,75)
}
)
usethis::use_test()
library(pmicrobiologyfunction)
usethis::use_test()
usethis::use_test()
test_check("pmicrobiologyfunction")
devtools::check()
test_check("pmicrobiologyfunction")
usethis::use_test()
#' @param pHmin minimal groMh pH #a number
#' @param pHmax Maximal growth pH #a number
#' @param muopt Optimal growth rate # a number
#' @param pHopt Optimal growth pH #a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_pH_4p(5,4,9,0.5,7)
Gamma_pH_4p<- function(pH,pHmin,pHmax,muopt,pHopt)
{sqrtmumax<-sqrt(((pH >= pHmin) & (pH <= pHmax)) * muopt
*(pH - pHmin) * (pH - pHmax) / ((pH - pHmin) * (pH - pHmax) - (pH - pHopt)^2))
return((sqrtmumax^2))
}
Gamma_pH_4p(5,4,9,0.5,7)
Gamma_pH_4p(4,4,9,0.5,7)
Gamma_pH_4p(7,4,9,0.5,7)
test_that("Cheking the model Gamma_pH_3p", {
expect_equal(Gamma_pH_4p(5,4,9,0.5,7),0.25)
expect_equal(Gamma_pH_4p(4,4,9,0.5,7),0)
expect_equal(Gamma_pH_4p(7,4,9,0.5,7),0.5)
})
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
usethis::use_test()
test_check("pmicrobiologyfunction")
usethis::use_test
Gamma_T(10,4,20,37,0.037)
#' @param Tmin Minimal growth temperature #a number
#' @param Topt Optimal growth temperature #a number
#' @param Tmax Maximal growth temperature # a number
#' @param T Temperature # a number
#' @param muopt optimal growth rate # a number
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_T(10,4,20,37,0.037)
Gamma_T <- function(T,Tmin, Topt, Tmax,muopt)
{sqrmumax<-sqrt(((T >= Tmin) & (T <= Tmax)) * muopt * (T - Tmax) * (T - Tmin)^2 / ((Topt - Tmin) * ((Topt - Tmin) * (T - Topt) - (Topt - Tmax) * (Topt + Tmin - 2.0 * T))))
return(sqrmumax^2)
}
#' @param Tmin Minimal growth temperature #a number
#' @param Topt Optimal growth temperature #a number
#' @param Tmax Maximal growth temperature # a number
#' @param T Temperature # a number
#' @param muopt optimal growth rate # a number
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_T(10,4,20,37,0.037)
Gamma_T <- function(T,Tmin, Topt, Tmax,muopt)
{sqrmumax<-sqrt(((T >= Tmin) & (T <= Tmax)) * muopt * (T - Tmax) * (T - Tmin)^2 / ((Topt - Tmin) * ((Topt - Tmin) * (T - Topt) - (Topt - Tmax) * (Topt + Tmin - 2.0 * T))))
return(sqrmumax^2)
}
usethis::use_test()
Gamma_T(10,4,20,37,0.037)
test_that("Cheking the model Gamma_T", {
expect_equal(Gamma_T(10,4,20,37,0.037), 0.02443207)
})
Gamma_T(10,4,20,37,0.037)
Gamma_T(3,4,20,37,0.037)
Gamma_T(20,4,20,37,0.037)
Gamma_T(37,4,20,37,0.037)
Gamma_T(20,4,20,37,0.037)
Gamma_T(15,4,20,37,2)
Gamma_T(15,4,20,37,2)
Gamma_T(15,4,20,37,2)
test_that("Cheking the model Gamma_T", {
expect_equal(Gamma_T(10,4,20,37,0.037), 0.02443207)
expect_equal(Gamma_T(3,4,20,37,0.037),0)
expect_equal(Gamma_T(20,4,20,37,0.037),0.037)
expeect_equal(Gamma_T(15,4,20,37,2),1.828297)
})
test_that("Cheking the model Gamma_T", {
expect_equal(Gamma_T(10,4,20,37,0.037), 0.02443207)
expect_equal(Gamma_T(3,4,20,37,0.037),0)
expect_equal(Gamma_T(20,4,20,37,0.037),0.037)
expect_equal(Gamma_T(15,4,20,37,2),1.828297)
})
test_that("Cheking the model Gamma_T", {
expect_equal(Gamma_T(10,4,20,37,0.037), 0.02443207)
expect_equal(Gamma_T(3,4,20,37,0.037),0)
expect_equal(Gamma_T(20,4,20,37,0.037),0.037)
})
Gamma_pH_4p(5,4,9,0.5,7)
#' @param aw water activity #a number
#' @param awmin minimal growth water activity # a number
#' @param awopt optimal growth water activity # a number
#' @param muopt Optimal growth rate # a number # a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p<-function(aw,awmin,awopt,muopt)
{ sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - 1)*(aw - awmin)^2 / ((awopt - awmin) * (awopt - awmin) * (aw - awopt) - (awopt - 1) * (awopt + awmin - 2.0 * aw)))
return((sqrtmumax ^ 2))
}
testthat::test_that()
test()
testthis()
testVirtual()
testthat::test_check()
test_that()
use_test()
devtools::uses_testthat()
test_that
library(testthat)
testthat::use_test()
use_test()
devtools::uses_testthat()
devtools::use_test()
test_that()
#' @param aw water activity #a number
#' @param awmin minimal growth water activity # a number
#' @param awopt optimal growth water activity # a number
#' @param muopt Optimal growth rate # a number # a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p<-function(aw,awmin,awopt,muopt)
{ sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - 1)*(aw - awmin)^2 / ((awopt - awmin) * (awopt - awmin) * (aw - awopt) - (awopt - 1) * (awopt + awmin - 2.0 * aw)))
return((sqrtmumax ^ 2))
}
test_that(Gamma_aw_3p)
test_check()
testInheritedMethods()
test_that()
#' @param aw water activity #a number
#' @param awmin minimal growth water activity # a number
#' @param awopt optimal growth water activity # a number
#' @param muopt Optimal growth rate # a number # a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p<-function(aw,awmin,awopt,muopt)
{ sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - 1)*(aw - awmin)^2 / ((awopt - awmin) * (awopt - awmin) * (aw - awopt) - (awopt - 1) * (awopt + awmin - 2.0 * aw)))
return((sqrtmumax ^ 2))
}
testthat()
testthat::auto_test()
test_that()
#' @param aw water activity #a number
#' @param awmin minimal growth water activity # a number
#' @param awopt optimal growth water activity # a number
#' @param muopt Optimal growth rate # a number # a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p<-function(aw,awmin,awopt,muopt)
{ sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - 1)*(aw - awmin)^2 / ((awopt - awmin) * (awopt - awmin) * (aw - awopt) - (awopt - 1) * (awopt + awmin - 2.0 * aw)))
return((sqrtmumax ^ 2))
}
testthat()
test_that()
use_test()
Gamma_T(10,4,20,37,0.037)
devtools::check()
library(testthat)
#' @param aw water activity #a number
#' @param awmin minimal growth water activity # a number
#' @param awopt optimal growth water activity # a number
#' @param muopt Optimal growth rate # a number # a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p<-function(aw,awmin,awopt,muopt)
{ sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - 1)*(aw - awmin)^2 / ((awopt - awmin) * (awopt - awmin) * (aw - awopt) - (awopt - 1) * (awopt + awmin - 2.0 * aw)))
return((sqrtmumax ^ 2))
}
test_that()
devtools::uses_testthat()
devtools::test()
devtools::uses_testthat()
test_that(Gamma_aw_3p())
usethis::use_test()
Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p(0.91,0.90, 0.98, 0.5)
Gamma_aw_3p(0.91,0.90, 0.98, 0.5)
#' @param aw water activity #a number
#' @param awmin minimal growth water activity # a number
#' @param awopt optimal growth water activity # a number
#' @param muopt Optimal growth rate # a number # a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p<-function(aw,awmin,awopt,muopt)
{ sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - 1)*(aw - awmin)^2 / ((awopt - awmin) * (awopt - awmin) * (aw - awopt) - (awopt - 1) * (awopt + awmin - 2.0 * aw)))
return((sqrtmumax ^ 2))
}
Gamma_aw_3p(0.91,0.90, 0.98, 0.5)
Gamma_aw_3p(0.97,0.90, 0.98, 0.5)
Gamma_aw_3p(0.99,0.90, 0.98, 0.5)
Gamma_aw_3p(0.98,0.90, 0.98, 0.5)
Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p()
devtools::test_coverage()
Gamma_pH_3p
#' @param aw water activity #a number
#' @param awmin minimal growth water activity # a number
#' @param awopt optimal growth water activity # a number
#' @param muopt Optimal growth rate # a number # a number
#'
#' @return sqrmumax^2= mumax #maximum growth rate # a number
#' @export
#'
#' @examples
#' Gamma_aw_3p(0.95,0.90, 0.98, 0.5)
Gamma_aw_3p<-function(aw,awmin,awopt,muopt)
{ sqrtmumax <- sqrt((aw >= awmin) * muopt * (aw - 1)*(aw - awmin)^2 / ((awopt - awmin) * (awopt - awmin) * (aw - awopt) - (awopt - 1) * (awopt + awmin - 2.0 * aw)))
return((sqrtmumax ^ 2))
}
library(nlsMicrobio)
cpm_aw_3p
