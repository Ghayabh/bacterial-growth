test_path(ode(y = c(Q=(1/exp(-9.21)-1), y=10), times = seq(1,2,0.5), func = baranyi_diff, parms =c(mumax=1, ymax=1000000000)))
covr::report()
covr::code_coverage()
Reporter
covr::codecov()
devtools::test_coverage()
q()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::test_coverage()
library(bacterialgrowth)
devtools::test_coverage()
devtools::test_coverage()
library(deSolve)
devtools::test_coverage()
library(deSolve)
test_that("checking the differential form of the baranyi model", {
expect_equal(length(ode(y = c(Q=(1/exp(-9.21)-1), y=10), times = seq(0,24,1), func = baranyi_diff, parms =c(mumax=1, ymax=1000000000))),75)
})
library(testthat)
devtools::test_coverage()
test_check()
usethis::use_test()
test_path(ode(y = state, times = time, func = baranyi_diff_without_lag, parms = parameters)))
test_path(ode(y = state, times = time, func = baranyi_diff_without_lag, parms = parameters))))
test_path(ode(y = state, times = time, func = baranyi_diff_without_lag, parms = parameters))
test_path(ode(y = 10, times = seq(1,24), func = baranyi_diff_without_lag, parms = c(mumax=1, ymax=10000)))
test_path(ode(state = 10, times = seq(1,24), func = baranyi_diff_without_lag, parms = c(mumax=1, ymax=10000)))
test_path(ode(y=state = 10, times = seq(1,24), func = baranyi_diff_without_lag, parms = c(mumax=1, ymax=10000)))
test_path(ode(y=10, times = seq(1,24), func = baranyi_diff_without_lag, parms = c(mumax=1, ymax=10000)))
test_path(ode(y=c(y=15), times = seq(1,24), func = baranyi_diff_without_lag, parms = c(mumax=1, ymax=10000)))
test_path(length(ode(y=c(y=15), times = seq(1,24), func = baranyi_diff_without_lag, parms = c(mumax=1, ymax=10000))))
usethis::use_test()
test_path(length(ode(y = c(Q=1/((1/exp(-9.21))-1),y=15), times = seq(0,70, 1), func = baranyi_diff_without_Nmax, parms = c(mumax=1)))))
test_path(length(ode(y = c(Q=1/((1/exp(-9.21))-1),y=15), times = seq(0,70, 1), func = baranyi_diff_without_Nmax, parms = c(mumax=1))))
#' @param temp time(h)
#' @param mumax maximum growth rate # a number
#' @param log10N0 Initial population density #a number
#' @param log10Nmax maximum population density # a number
#'
#' @return log10N #a number
#' @export
#'
#' @examples
#' modBaran_without_lag(seq(0,24,1), 0.5,3,5)
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
modBaran_without_lag(seq(0,24,1), 0.5,3,5)
1
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
log10N <- (log10Nmax - log10(1 + (10^(log10Nmax - log10N0) - 1) * exp(-mumax * temp)))
return(log10N)
}
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
log10N <- (log10Nmax - log10(1 + (10^(log10Nmax - log10N0) - 1) * exp(-mumax * temp)))
return(log10N)
}
library(nlsMicrobio)
#' @param temp time(h)
#' @param mumax maximum growth rate # a number
#' @param log10N0 Initial population density #a number
#' @param log10Nmax maximum population density # a number
#'
#' @return log10N #a number
#' @export
#'
#' @examples
#' modBaran_without_lag(seq(0,24,1), 0.5,3,5)
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
log10N <- (log10Nmax - log10(1 + (10^(log10Nmax - log10N0) - 1) * exp(-mumax * temp)))
return(log10N)
}
modBaran_without_lag(seq(0,24,1), 0.5,3,5)
modBaran_without_lag(temp=1, 0.5,3,5)
library(testthat)
library(devtools)
devtools: check()
library(devtools)
devtools: check()
devtools::check()
#' @param temp time(h)
#' @param mumax maximum growth rate # a number
#' @param log10N0 Initial population density #a number
#' @param log10Nmax maximum population density # a number
#'
#' @return log10N #a number
#' @export
#'
#' @examples
#' modBaran_without_lag(seq(0,24,1), 0.5,3,5)
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
log10N <- (log10Nmax - log10(1 + (10^(log10Nmax - log10N0) - 1) * exp(-mumax * temp)))
return(log10N)
}
)
modBaran_without_lag<-function(temp,mumax,log10N0,log10Nmax){
log10N <- (log10Nmax - log10(1 + (10^(log10Nmax - log10N0) - 1) * exp(-mumax * temp)))
return(log10N)
}
usethis::use_test()
test_path(modBaran_without_lag(seq(0,24,1), 0.5,3,5))
test_path(length(modBaran_without_lag(seq(0,24,1), 0.5,3,5))
)
test_path(length(modBaran_without_lag(1, 0.5,3,5))
)
test_path(length(modBaran_without_lag(2, 0.5,3,5)))
test_path(length(modBaran_without_lag(24, 0.5,3,5)))
test_path(length(modBaran_without_lag(ttemp = 2, 0.5,3,5)))
test_path(length(modBaran_without_lag(temp = 2, 0.5,3,5)))
test_path(length(modBaran_without_lag(seq(0,1), 0.5,3,5)))
test_path(modBaran_without_lag(1, 0.5,3,5)))
test_path(modBaran_without_lag(1, 0.5,3,5))))
test_path(modBaran_without_lag(1, 0.5,3,5))
test_path(modBaran_without_lag(temp=24, 0.5,3,5))))
test_path(modBaran_without_lag(temp=24, 0.5,3,5)))
test_path(modBaran_without_lag(temp=24, 0.5,3,5))
modBaran_without_Nmax<-function(temp,mumax,lag,log10N0){
log10N <- log10N0 + mumax * temp/log(10) + log10(exp(-mumax * temp) * (1 - exp(-mumax * lag)) + exp(-mumax * lag))
return(log10N)
}
usethis::use_test()
test_path( modBaran_without_Nmax(seq(0,48,0.5), 0.035, 4, 3))
test_path(length(modBaran_without_Nmax(seq(0,48,0.5), 0.035, 4, 3)))
test_path(modBaran_without_Nmax(temp=1, 0.035, 4, 3))
test_path(modBaran_without_Nmax(temp=90, 0.035, 4, 3))
test_check()
test_coverage()
jameson<-function(t,state,parameters){
with(
as.list(c(state,parameters)),{
dQ1<-mumax1*Q1
dQ2<-mumax2*Q2
dy1<-(Q1/(1+Q1))*mumax1*(1-(y1/ymax1))*(1-(y2/ymax2))*y1
dy2<-(Q2/(1+Q2))*mumax2*(1-(y1/ymax1))*(1-(y2/ymax2))*y2
return(list(c(dQ1,dQ2,dy1,dy2)))
}
)
}
out <- ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))plot(out)
out <- ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))
plot(out)
plot(time,log10(out[,"y1"]),col="red", lwd = 2, lty = 1)
plot(time,log10(out[,"y2"]),col="green", lwd = 2, lty = 1)
out <- ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))
plot(out)
plot(time,log10(out[,"y2"]),col="green", lwd = 2, lty = 1)
jameson<-function(t,state,parameters){
with(
as.list(c(state,parameters)),{
dQ1<-mumax1*Q1
dQ2<-mumax2*Q2
dy1<-(Q1/(1+Q1))*mumax1*(1-(y1/ymax1))*(1-(y2/ymax2))*y1
dy2<-(Q2/(1+Q2))*mumax2*(1-(y1/ymax1))*(1-(y2/ymax2))*y2
return(list(c(dQ1,dQ2,dy1,dy2)))
}
)
}
K2=10
Q2=1/((1/exp(-K2))-1)
K1=2
Q1=1/((1/exp(-K1))-1)
state <- c(Q1=Q1,Q2=Q2,y1=1,y2=10)
time <- seq(from=0, to=200, by = 1)
parameters <- c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)
out <- ode(y = state, times = time, func = jameson, parms = parameters)
plot(out)
plot(time,log10(out[,"y1"]),col="red", lwd = 2, lty = 1)
plot(time,log10(out[,"y2"]),col="green", lwd = 2, lty = 1)
K2=10
Q2=1/((1/exp(-K2))-1)
K1=2
Q1=1/((1/exp(-K1))-1)
state <- c(Q1=Q1,Q2=Q2,y1=1,y2=10)
time <- seq(from=0, to=200, by = 1)
parameters <- c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)
out <- ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))
plot(out)
plot(time,log10(out[,"y1"]),col="red", lwd = 2, lty = 1)
plot(time,log10(out[,"y2"]),col="green", lwd = 2, lty = 1)
K2=10
Q2=1/((1/exp(-K2))-1)
K1=2
Q1=1/((1/exp(-K1))-1)
state <- c(Q1=Q1,Q2=Q2,y1=1,y2=10)
time <- seq(from=0, to=200, by = 1)
parameters <- c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)
out <- ode(y = state, times = time, func = jameson, parms = parameters)
plot(out)
plot(time,log10(out[,"y1"]),col="red", lwd = 2, lty = 1)
plot(time,log10(out[,"y2"]),col="green", lwd = 2, lty = 1)
usethis::use_test()
test_path(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))
)
out
test_path(return(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))
)
test_path(return(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(rownames(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))))
test_path(rownames(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(rownames(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(names(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(list(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(head(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(plot(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
expandedjameson<-function(t,state,parameters){
with(
as.list(c(state,parameters)),{
dQ1<-mumax1*Q1
dQ2<-mumax2*Q2
dy1<-(Q1/(1+Q1))*mumax1*(1-(y1/ymax1))*(1-(gamma*y2/ymax2))*y1
dy2<-(Q2/(1+Q2))*mumax2*(1-(y1/ymax1))*(1-(y2/ymax2))*y2
return(list(c(dQ1,dQ2,dy1,dy2)))
}
)
}
out <- ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = expandedjameson, parms = c(gamma=1, mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))
plot(out)
plot(time,log10(out[,"y1"]),col="red", lwd = 2, lty = 1)
plot(time,log10(out[,"y2"]),col="green", lwd = 2, lty = 1)
usethis::use_testthat()
usethis::use_testthat()
use_test()
use_test()
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = jameson, parms = c(mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = expandedjameson, parms = c(gamma=1, mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = expandedjameson, parms = c(gamma=1, mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = expandedjameson, parms = c(gamma=1, mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = expandedjameson, parms = c(gamma=0.5, mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000)))))
test_path(length(ode(y = c(Q1=1/((1/exp(-2))-1),Q2=1/((1/exp(-10))-1),y1=1,y2=10),times = seq(from=0, to=200, by = 1), func = expandedjameson, parms = c(gamma=0.5, mumax1 = 0.14, mumax2=0.3, ymax1=100000,ymax2=10000000))))
covr::code_coverage()
covr::codecov()
devtools::test_coverage()
check()
devtools::check()
#' @param mumax maximum growth rate # a number
#' @param lag lag time # a number
#' @param Nmax maximum population size #a number
#' @param N0 initial population size # a number
#'
#' @return log10N #a number
#' @export
#'
#' @examples
#' modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,Nmax = 10^5,N0=100)
modrosso<-function(temp,mumax,lag,N0,Nmax){log10N<- (temp<=lag)*log10(N0)+(temp>lag)*
modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^5)
)
modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^5)
modrosso<-function(temp,mumax,lag,N0,Nmax){log10N<- (temp<=lag)*log10(N0)+(temp>lag)*
(log10(Nmax)-log10(1+((Nmax/N0)-1)*exp(-mumax*(temp-lag))))
return(log10N)
}
library(bacterialgrowth)
modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^5)
library(nlsMicrobio)
nls_test<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.5,lag=2,N0=10000,Nmax=1000000000))
nls_test<-nls(LOG10N~modBaran(t,mumax,lag,log10N0,log10Nmax),data=growthcurve1,list(mumax=0.5,lag=2,log10N0=4,log10Nmax=9))
nls_test<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.5,lag=2,N0=10000,Nmax=1000000000))
nls_test<-nls(LOG10N~modBaran(t,mumax,lag,log10N0,log10Nmax),data=growthcurve1,list(mumax=0.5,lag=2,log10N0=4,log10Nmax=9))
summary(nls_test)
modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^5)
plot(modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^5))
plot(modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^9))
plotfit(modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^9), smooth = TRUE)
plot(t,modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^9))
plot(,modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^9))
plot(modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,N0=100,Nmax = 10^9))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.5,lag=2,N0=10000,Nmax=1000000000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.5,lag=10,N0=10000,Nmax=1000000000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.5,lag=10,N0=10000,Nmax=10000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.05,lag=10,N0=10000,Nmax=10000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.05,lag=10,N0=10000,Nmax=100000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.05,lag=10,N0=10000,Nmax=100000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.05,lag=10,N0=10000,Nmax=10000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.05,lag=10,N0=1,Nmax=10000))
nls_test4<-nls(LOG10N~modrosso(t,mumax,lag,N0,Nmax),data=growthcurve1,list(mumax=0.05,lag=10,N0=2,Nmax=10000))
?baranyi_diff
insert/data(datalambert.csv)
inst/extdata(datalambert.csv)
devtools::use_data
pryr::mem_used()
devtools::create()
devtools::create(lazydata)
devtools::create(lazyData)
devtools::use_data_raw()
devtools::build_manual()
devtools::build_vignettes()
system.file("extdata", "data lambert. csv", package = "bacterial growth")
save(mydata, file="data/mydata.RData")
save(data lambert.csv, file="data/mydata.RData")
save(data lambert.csv, file="data/data.RData")
save(data lambert.csv, file="data/data.RData")
data<-read.csv2(data lambert.csv)
library(readxl)
data<-read_excel(data lambert.xlsx)
data<-read_excel("data lambert.xlsx")
data<-read.csv2("data lambert.csv")
setwd("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction")
setwd("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction")
setwd("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction")
setwd("C:/Users/g.benhmidene/Desktop/Données brutes pg")
data<-read.csv2("data lambert.csv")
data
data<-read_excel(data lambert.xlsx)
data<-read.csv2("data lambert.xlsx")
data<-read_excel("data lambert.xlsx")
data
mean(data)
mean(data$pH)
data<-read.csv2("data lambert.xlsx")
data<-read.csv2("data lambert.csv")
mean(data)
mean(data$pH)
summary(data)
summary(data$pH)
data1<-read_excel("data lambert.xlsx")
summary(data1$pH)
str(data1$pH)
str(data$pH)
data
data1
save(data, file="data/data.RData")
save(data1, file="data1/data.RData")
> package . skeleton (" packClassic " ,
code _ file =" packClassic /R/ progClassic .R " ,
> package . skeleton (" packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
for ce =TRUE
)
> package . skeleton (" packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
for ce =TRUE)
> package . skeleton (" packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
force =TRUE)
> package . skeleton ("packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
force =TRUE)
> package.skeleton("packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
force =TRUE)
save(data1, file="data1/data.xlsx")
save(data, file="data/data.RData")
package.skeleton(name="bacterialgrowth")
save(data, file="data/data.RData")
> package . skeleton (" packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
force =TRUE)
usethis::use_data()
setwd("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction")
> package . skeleton (" packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
force =TRUE)
usethis::use_data()
points <- matrix(sample(1:10, size = 20, replace = TRUE), nrow = 10, ncol = 2)
colnames(points) <- c("X", "Y")
> package . skeleton (" packClassic " ,
code _ file =" packClassic /R/ progClassic .R " , namespace =TRUE,
force =TRUE)
usethis::use_data(data)
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data.rda")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data.rda")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data.rda")
data.rda
points <- matrix(sample(1:10, size = 20, replace = TRUE), nrow = 10, ncol = 2)
colnames(points) <- c("X", "Y")
usethis::use_data(points)
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/points.rda")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data.rda")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data.rda")
data(data)
data
data
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data.rda")
data
data
data
datapH
data(datapH)
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data pH.rda")
data(datapH)
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/data pH.rda")
data
data(datapH)
usethis::use_data(datapH)
usethis::use_data(datapH)
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/datapH.rda")
datapH
data
usethis::use_data(datapH)
datapH
data(datapH)
datapH
data(datapH)
datapH
data
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/.RData")
datapH
data(datapH)
datapH
setwd("C:/Users/g.benhmidene/Desktop/Données brutes pg")
datapH<-read.csv2("data lambert.csv")
use
usethis::use_data(datapH)
datapH
setwd("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction")
datapH
library(bacterialgrowth)
pryr::mem_used()
install.packages("pryr")
library(pryr)
pryr::mem_used()
invisible(datapH)
pryr::mem_used()
usethis::use_data_raw()
usethis::use_data(DATASET, overwrite = TRUE)
usethis::use_data(datapH, overwrite = TRUE)
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/datapH.rda")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/.RData")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/datapH.rda")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/.RData")
load("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/data/datapH.rda")
datapH
setwd("C:/Users/g.benhmidene/Desktop/Données brutes pg")
datapH<-read.csv2("data lambert.csv", header = T)
datapH
datapH<-read.table("data lambert.csv", header = T)
datapH<-read.csv2("data lambert.csv", header = T)
usethis::use_data(datapH)
library(bacterialgrowth)
usethis::use_data(datapH)
datapH
setwd(path.package("bacterialgrowth"))
document()
usethis::use_package_doc()
devtools::check()
datapH
devtools::check()
devtools::check()
devtools::check()
datapH
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(bacterialgrowth)
load("C:/Users/g.benhmidene/Desktop/bacterialgrowth/data/datapH.rda")
devtools::check()
load("C:/Users/g.benhmidene/Desktop/bacterialgrowth/data/datapH.rda")
library(roxygen2)
roxygen2::roxygenize()
load("C:/Users/g.benhmidene/Desktop/bacterialgrowth/data/datapH.rda")
roxygenize(datapH.rda)
roxygenize(datapH)
roxygenize(datapH)
roxygen2::env_file()
roxygen2::env_file(datapH)
roxygen2::object()
roxygen2::object(data())
roxygen2::object(datapH
roxygen2::object(datapH)
roxygenise(datapH)
roxygenise(datapH.rda)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
load("C:/Users/g.benhmidene/Desktop/bacterialgrowth/data/datapH.rda")
devtools::check()
roxygen2::roxy_tag_rd()
roxygen2::roxy_tag_rd(ddatapH)
roxygen2::roxy_tag_rd(datapH)
roxygen2::roxygenise(datapH)
roxygen2::roxygenise()
usethis::use_roxygen_md()
usethis::use_roxygen_md()
usethis::use_roxygen_md(datapH)
usethis::use_roxygen_md()
UseMethod()
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
plot(datapH)
str(datapH)
rcmdcheck::rcmdcheck()
rcmdcheck::rcmdcheck()
load("C:/Users/g.benhmidene/Desktop/bacterialgrowth/data/datapH.rda")
datapH
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
load("C:/Users/g.benhmidene/Desktop/bacterialgrowth/data/datapH.rda")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
data("datapH")
devtools::check()
