((Topt - Tmin) * (T - Topt) - (Topt - Tmax) * (Topt + Tmin - 2.0 * T)))
* (pH - pHmin) * (pH - pHmax) / ((pH - pHmin) * (pH - pHmax) - (pH - pHopt)^2)
* (aw - 1) * (aw - awmin)^2 / ((awopt - awmin) * ((awopt - awmin) * (aw - awopt) - (awopt - 1)
* (awopt + awmin - 2.0 * aw))))
return((sqrtmumax ^ 2))
}
Gamma_T_pH_aw(10,4,45,37,5,4,9,7,0.92,0.90,0.98,0.97,0.5)
Gamma_T_pH_aw(37,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5)
Gamma_T_pH_aw(3,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5)
usethis::use_test()
devtools::test_check
devtools::test_check()
devtools::test_check()
devtools::check()
check_test
devtools::test()
usethis::use_test()
usethis::use_test()
devtools:test_check()
devtools:test
devtools::test()
Gamma_T_pH_aw(37,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.50
Gamma_T_pH_aw(37,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.50)
devtools::test()
test_check("pmicrobiologyfunction")
context("pmicrobiologyfunction")
test_check"pmicrobiologyfunction")
test_check("pmicrobiologyfunction")
context("pmicrobiologyfunction")
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
context("pmicrobiologyfunction function")
library(pmicrobologyfunction)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
context("pmicrobiologyfunction")
library(testthat)
library(pmicrobiologyfunction)
test_that("Cheking the model Gamma_pH_4p", {
expect_equal(Gamma_T_pH_aw(10,4,45,37,5,4,9,7,0.92,0.90,0.98,0.97,0.5),0.00232133)
expect_equal(Gamma_T_pH_aw(37,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5),0.5)
expect_equal(Gamma_T_pH_aw(3,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5),0)
})
test_check("pmicrobiologyfunction")
test_that("Cheking the model Gamma_pH_4p", {
expect_equal(Gamma_T_pH_aw(10,4,45,37,5,4,9,7,0.92,0.90,0.98,0.97,0.5),0.00232133)
expect_equal(Gamma_T_pH_aw(37,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5),0.5)
expect_equal(Gamma_T_pH_aw(3,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5),0)
})
test_check("pmicrobiologyfunction")
test_check("pmicrobiologyfunction")
test_check(pmicrobiologyfunction)
test_check("pmicrobiologyfunction:", pmicrobiologyfunction)
test_check("pmicrobiologyfunction", pmicrobiologyfunction)
test_check("pmicrobiologyfunction", Gamma_T)
test_check("pmicrobiologyfunction", Gamma_T(10,4,20,37,0.5))
test_check("pmicrobiologyfunction", Gamma_T)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
library(testthat)
?context
test_check("pmicrobiologyfunction")
devtools::test()
devtools::test()
context("Testing pmicrobiologyfunction")
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
test_check("pmicrobiologyfunction")
test_that("Cheking the model Gamma_pH_4p", {
expect_equal(Gamma_T_pH_aw(10,4,45,37,5,4,9,7,0.92,0.90,0.98,0.97,0.5),0.00232133)
expect_equal(Gamma_T_pH_aw(37,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5),0.5)
expect_equal(Gamma_T_pH_aw(3,4,45,37,7,5,9,7,0.97,0.90,0.98,0.97,0.5),0)
})
test_check("pmicrobiologyfunction")
library(testthat)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
test_that("Cheking the model Gamma_T", {
expect_equal(Gamma_T(10,4,20,37,0.037), 0.02443207)
expect_equal(Gamma_T(3,4,20,37,0.037),0)
expect_equal(Gamma_T(20,4,20,37,0.037),0.037)
})
devtools::test()
devtools::test()
library(pmicrobiologyfunction)
#' @param Tinf The theoritical cellular minimal temperature for growth #a number
#' @param Tsup The theoritical cellular maximal temperature for growth #a number
#' @param c a parameter #a number
#'
#' @return proba_T_Aug The single-cell growth probability, which increases from O to 1 when temperature value increases at a more favorable condition #a number
#' @export
#'
#' @examples
#' Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6) the values of Tinf,Tsup & c were imported from Augustin's 2012 review
#' Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6)
Proba_T<- function(T,Tinf,Tsup,c) {
proba_T_Aug<-c()
for (i in 1:length(T)) {
}
if (T[i]<=Tinf){
proba_T_Aug[i]=0
}
else
{if(T[i]>=Tsup){
proba_T_Aug[i]=1
}
else
proba_T_Aug[i]<-(exp(T[i]/c)-exp(Tinf/c))/(exp(Tsup/c)-exp(Tinf/c))
}
return(proba_T_Aug)
}
Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6) the values of Tinf,Tsup & c were imported from Augustin's 2012 review
Proba_T(10,-3.6,17.3,7.6)
Proba_T(20,-3.6,17.3,7.6)
Proba_T(-2,-3.6,17.3,7.6)
Proba_T(-4,-3.6,17.3,7.6)
usethis::use_test()
devtools::test()
#' @param pHinf The cellular minimal pH for growth # a number
#' @param pHsup The cellular maximal pH for growth # a number
#'
#' @return proba_pH_Aug The single-cell growth probability # a number
#' @export
#'
#' @examples
#' Proba_pH(5,pHinf=-4.34,pHsup=5.93) the values of phinf & phsup were imported from Augustin's 2012 review
#' Proba_pH(4,pHinf=-4.34,pHsup=5.93)
#' Proba_pH(7,pHinf=-4.34,pHsup=5.93)
Proba_pH<-function(pH,pHinf,pHsup){
proba_pH_Aug<-c()
for (i in 1:length(pH)) {
}
if(pH[i]<=pHinf){
proba_pH_Aug[i]=0
}
else
{if(pH[i]>=pHsup){
proba_pH_Aug[i]=1
} else
proba_pH_Aug[i]<-  (exp(-pH[i])-exp(-pHinf))/(exp(-pHsup)-exp(-pHinf))
}
return(proba_pH_Aug)
}
source('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/R/Proba_pH.R', echo=TRUE)
Proba_pH(5,-4,5.93)
Proba_pH(5,-4.34,5.93)
Proba_pH(5,-4.34,5.93)
Proba_pH(5,4.34,5.93)
Proba_pH(4,4.34,5.93)
Proba_pH(7,4.34,5.93)
usethis::use_test()
Proba_pH(5,4.34,5.93)
Proba_pH(5.5,4.34,5.93)
devtools::test()
Proba_pH(4.5,4.34,5.93)
Proba_pH(5,pHinf=4.34,pHsup=5.93) the values of phinf & phsup were imported from Augustin's 2012 review
Proba_pH<-function(pH,pHinf,pHsup){
proba_pH_Aug<-c()
for (i in 1:length(pH)) {
}
if(pH[i]<=pHinf){
proba_pH_Aug[i]=0
}
else
{if(pH[i]>=pHsup){
proba_pH_Aug[i]=1
} else
proba_pH_Aug[i]<-  (exp(-pH[i])-exp(-pHinf))/(exp(-pHsup)-exp(-pHinf))
}
return(proba_pH_Aug)
}
Proba_pH(4.5,4.34,5.93)
Proba_pH(4.9,4.34,5.93)
expect_equal(Proba_pH(4.9,4.34,5.93),0.5386317)
expect_equal(Proba_pH(4.9,4.34,5.93),0.5386317)
Proba_pH(5,pHinf=4.34,pHsup=5.93)
test_that("testing the model Proba_pH", {
expect_equal(Proba_pH(4,4.34,5.93), 0)
expect_equal(Proba_pH(5,4.34,5.93),0.606914)
})
Proba_pH(5.2,pHinf=4.34,pHsup=5.93)
Proba_pH(5.9,pHinf=4.34,pHsup=5.93)
Proba_pH(6,pHinf=4.34,pHsup=5.93)
Proba_pH(5.135,pHinf=4.34,pHsup=5.93)
Proba_pH(5.2,pHinf=4.34,pHsup=5.93)
devtools::test()
Proba_aw(aw=0.95,awinf = 0.917,awsup = 0.988)the values of awinf & awsup were imported from Augustin's 2012 review
Proba_aw<-function(aw,awinf,awsup){
proba_aw_Aug<-c()
for (i in 1:length(aw)) {
}
if (aw[i]<=awinf){
proba_aw_Aug[i]=0
}
else
{if(aw[i]>=awsup){
proba_aw_Aug[i]=1
}else
proba_aw_Aug[i]<-(aw[i]-awinf)/(awsup-awinf)
}
return(proba_aw_Aug)
}
Proba_aw(0.90,awinf=0.917,awsup=0.988)
Proba_aw(0.99,awin=0.917,awsup=0.988)
Proba_aw(aw=0.95,awinf = 0.917,awsup = 0.988)
usethis::use_test()
Proba_aw(aw=0.97,awinf = 0.917,awsup = 0.988)
Proba_aw(aw=0.98,awinf = 0.917,awsup = 0.988)
Proba_aw(aw=0.99,awinf = 0.917,awsup = 0.988)
Proba_aw(aw=0.96,awinf = 0.917,awsup = 0.988)
testthat::auto_test(Proba_aw(0.95,0.91,0,988))
testthat::auto_test(Proba_aw(0.95,0.91,0.988))
testthat::context()
testthat::context(pmicrobiologyfunction)
testthat::context("pmicrobiologyfunction")
test_check("pmicrobiologyfunction")
library(testthat)
library(pmicrobiologyfunction)
test_check("pmicrobiologyfunction")
test_that(pmicrobiologyfunction,Proba_aw(0.95,0.91,0.988))
Proba_pH<-function(pH,pHinf,pHsup){
proba_pH_Aug<-c()
for (i in 1:length(pH)) {
}
if(pH[i]<=pHinf){
proba_pH_Aug[i]=0
}
else
{if(pH[i]>=pHsup){
proba_pH_Aug[i]=1
} else
proba_pH_Aug[i]<-  (exp(-pH[i])-exp(-pHinf))/(exp(-pHsup)-exp(-pHinf))
}
return(proba_pH_Aug)
}
test_that(pmicrobiologyfunction,Proba_aw(0.95,0.91,0.988))
test_check(Proba_aw(0.95,0.91,0.988))
Proba_aw(0.95,0.91,0.988)
#' @param pHinf The cellular minimal pH for growth # a number
#' @param pHsup The cellular maximal pH for growth # a number
#'
#' @return proba_pH_Aug The single-cell growth probability # a number
#' @export
#'
#' @examples
#' Proba_pH(5,pHinf=4.34,pHsup=5.93) the values of phinf & phsup were imported from Augustin's 2012 review
#' Proba_pH(4,pHinf=4.34,pHsup=5.93)
#' Proba_pH(7,pHinf=4.34,pHsup=5.93)
Proba_pH<-function(pH,pHinf,pHsup){
proba_pH_Aug<-c()
for (i in 1:length(pH)) {
}
if(pH[i]<=pHinf){
proba_pH_Aug[i]=0
}
else
{if(pH[i]>=pHsup){
proba_pH_Aug[i]=1
} else
proba_pH_Aug[i]<-  (exp(-pH[i])-exp(-pHinf))/(exp(-pHsup)-exp(-pHinf))
}
return(proba_pH_Aug)
}
Proba_pH(5,pHinf=4.34,pHsup=5.93)
Proba_pH(5,pHinf=4.34,pHsup=5.93)
test_example(Proba_pH(5,pHinf=4.34,pHsup=5.93))
test_path(Proba_pH(5,pHinf=4.34,pHsup=5.93))
?expect_path
devtools::test()
Proba_c <- function(T,Tinf,Tsup,c,pH,pHinf,pHsup,aw,awinf,awsup){
Pc<-(Proba_T(T,Tinf,Tsup,c)*Proba_pH(pH,pHinf,pHsup)*Proba_aw(aw,awinf,awsup))
return(Pc)
}
Proba_c(10,Tinf=-3.6,Tsup=17.3,5,c=7.6,pHinf=-4.34,pHsup=5.93,0.95,awinf=0.917,awsup=0.988)
Proba_c(20,Tinf=-3.6,Tsup=17.3,c=7.6,5,pHinf=-4.34,pHsup=5.93,0.97,awinf=0.917,awsup=0.988)
Proba_c(-4,Tinf=-3.6,Tsup=17.3,c=7.6,5,pHinf=-4.34,pHsup=5.93,0.97,awinf=0.917,awsup=0.988)
usethis::use_test()
test_path( Proba_c(10,Tinf=-3.6,Tsup=17.3,5,c=7.6,pHinf=-4.34,pHsup=5.93,0.95,awinf=0.917,awsup=0.988))
test_path(Proba_c(20,Tinf=-3.6,Tsup=17.3,c=7.6,5,pHinf=-4.34,pHsup=5.93,0.97,awinf=0.917,awsup=0.988))
library(pmicrobiologyfunction)
test_package("pmicrobiologyfunction")
#' @param mumax maximum growth rate # a number
#' @param lag lag time # a number
#' @param log10N0 Initial population density #a number
#' @param log10Nmax maximum population density # a number
#'
#' @return log10N #a number
#' @export
#'
#' @examples
#' modBaran(temp=seq(0,24,0.5), mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 )
modBaran<- function(temp,mumax,lag,log10N0,log10Nmax){
log10N<-(log10Nmax-log10(1+((10^(log10Nmax-log10N0))-1)/(1-exp(-mumax*lag)+exp(-mumax*(lag-temp)))))
return(log10N)
}
modBaran(temp=seq(0,24,0.5), mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 )
test_path(modBaran(temp=seq(0,24,0.5), mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
test_path(modBaran(temp=seq(0,2,0.5), mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
usethis::use_test()
test_path(modBaran(temp=1, mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
test_path(modBaran(temp=2, mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
test_path(modBaran(temp=0, mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
test_path(modBaran(temp=seq(0,2,0.5), mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
test_that("Checking the model modBaran", {
expect_equal(modBaran(temp=seq(0,2,0.5), mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 )),1, 1.00693723660583, 1.01389185956989,1.02086363481571, 1.0278523300661)
})
test_path(modBaran(temp=0, mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
test_path(modBaran(temp=1, mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
test_path(modBaran(temp=2, mumax = 0.037, lag=4, log10N0 = 1, log10Nmax = 5 ))
modrosso<-function(temp,mumax,lag,Nmax,N0){log10N<- (temp<=lag)*log10(N0)+(temp>lag)*
(log10(Nmax)-log10(1+((Nmax/N0)-1)*exp(-mumax*(temp-lag))))
return(log10N)
}
modrosso<-function(temp,mumax,lag,Nmax,N0){log10N<- (temp<=lag)*log10(N0)+(temp>lag)*
(log10(Nmax)-log10(1+((Nmax/N0)-1)*exp(-mumax*(temp-lag))))
return(log10N)
}
modrosso(temp=0,mumax=0.37,lag=4,Nmax = 10^5,N0=100)
modrosso(temp=1,mumax=0.37,lag=4,Nmax = 10^5,N0=100)
modrosso(temp=2,mumax=0.37,lag=4,Nmax = 10^5,N0=100)
modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,Nmax = 10^5,N0=100)
modrosso(temp=seq(0,24,0.5),mumax=0.37,lag=4,Nmax = 10^5,N0=100)
modrosso(temp=15,mumax=0.37,lag=4,Nmax = 10^5,N0=100)
modrosso(temp=10,mumax=0.37,lag=4,Nmax = 10^5,N0=100)
usethis::use_test()
test_path(modrosso(temp=10,mumax=0.37,lag=4,Nmax = 10^5,N0=100))
test_path(modrosso(temp=15,mumax=0.37,lag=4,Nmax = 10^5,N0=100))
devtools::as.package(pmicrobiologyfunction)
devtools::test()
library(pmicrobiologyfunction)
GlobalEnv
Proba_aw
Proba_c
Ptoba_pH
Proba_pH
Proba_T
Gamma_aw_2p()
Gamma_aw_2p
Gamma_aw_"p"
Gamma_aw_2p
Gamma_aw_3p
Gamma_pH_3p
expect_false(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6))
expect_false(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6),2)
expect_false(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6),2)
expect_equal(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6),2)
expect_equal(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6))
expect_condition(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6))
expect_failure(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6))
expect_gt(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6))
expect_true(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6),2)
expect_true(Proba_T(T=-4,Tinf=-3.6,Tsup=17.3,c=7.6),0)
expect_true(Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6),1)
expect_output(Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6),1)
expect_output(Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6))
expect_output(Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6)
expect_output(Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6))
expect_output(Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6))
use_coverage(pkg = ".", type = c("codecov"))
devtools::use_coverage
devtools::dev_mode()
devtools::devtest()
covr::codecov()
covr::codecov(https://github.com/Ghayabh/predictive-microbiology)
covr::codecov(https:github.com/Ghayabh/predictive-microbiology)
covr::codecov(github.com/Ghayabh/predictive-microbiology)
test_file("./path/to/file")
usethis::use_coverage()
covr::codecov()
covr::code_coverage()
covr <- file_coverage("R/Proba_T.R", "tests/testthat/test_sign_of_product.R")
install.packages("covr")
covr <- file_coverage("R/Proba_T.R", "tests/testthat/test_sign_of_product.R")
usethis::use_package("covr")
covr <- file_coverage("R/Proba_T.R", "tests/testthat/test_sign_of_product.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test_sign_of_product.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/testthat.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_T.R")
library(testthat)
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_T.R")
usethis::use_package("nlsMicrobio")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_pH.R")
library(testthat)
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_T.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_aw.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_T.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Gamma_aw_2p.R")
library(pmicrobiologyfunction)
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Gamma_aw_2p.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_pH.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Gamma_aw_2p.R")
covr::file_coverage("R/Proba_pH.R", "tests/testthat/test-Proba_pH.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Gamma_aw_2p.R")
covr::file_coverage("R/Gamma_aw_2p.R", "tests/testthat/test-Gamma_aw_2p.R")
covr::file_coverage("R/Gamma_aw_3p.R", "tests/testthat/test-Gamma_aw_3p.R")
covr::file_coverage("R/Gamma_pH_3p.R", "tests/testthat/test-Gamma_pH_3p.R")
covr::file_coverage("R/Gamma_pH_4p.R", "tests/testthat/test-Gamma_pH_4p.R")
covr::file_coverage("R/Gamma_T.R", "tests/testthat/test-Gamma_T.R")
covr::file_coverage("R/Gamma_T_pH_aw.R", "tests/testthat/test-Gamma_T_pH_aw.R")
covr::file_coverage("R/Proba_c.R", "tests/testthat/test-Prova_c.R")
covr::file_coverage("R/Proba_c.R", "tests/testthat/test-Proba_c.R")
covr::file_coverage("R/Gamma_T_pH_aw.R", "tests/testthat/test-Gamma_T_pH_aw.R")
covr::file_coverage("R/Gamma_T.R", "tests/testthat/test-Gamma_T.R")
covr::file_coverage("R/Gamma_T_pH_aw.R", "tests/testthat/test-Gamma_T_pH_aw.R")
covr::file_coverage("R/Gamma_T.R", "tests/testthat/test-Gamma_T.R")
covr::file_coverage("R/Gamma_pH_3p.R", "tests/testthat/test-Gamma_pH_3p.R")
covr::file_coverage("R/Gamma_aw_3p.R", "tests/testthat/test-Gamma_aw_3p.R")
covr::file_coverage("R/modBaran.R", "tests/testthat/test-modBaran.R")
covr::file_coverage("R/modrosso.R", "tests/testthat/test-modrosso.R")
library(covr)
codecov(token = "YOUR_TOKEN_GOES_HERE")
codecov(token = "YOUR_TOKEN_GOES_HERE")
codecov(token = https://github.com/Ghayabh/predictive-microbiology"")
codecov(token = "https://github.com/Ghayabh/predictive-microbiology")
codecov(token = "a7ea8c36-64cb-414d-86d1-37fdcef6a11a")
codecov(token = "a7ea8c36-64cb-414d-86d1-37fdcef6a11a")
devtools::check()
codecov(token = "a7ea8c36-64cb-414d-86d1-37fdcef6a11a")
test(pmicrobiologyfunction)
test(testcovr)
test("testcovr")
package_coverage(testcovr)
package_coverage(pmicrobiologyfunction)
package_coverage("pmicrobiologyfunction")
source('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/R/modrosso.R', echo=TRUE)
package_coverage(C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction)
package_coverage("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction")
?package_coverage
package_coverage(path = "pmicrobiologyfunction", type = c("tests"))
package_coverage(path = "C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction", type = c("tests"))
package_coverage(path = "C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction", type = c("tests"))
devtools::test()
devtools::as.package()
devtools::as.package("pmicrobiologyfunction")
devtools::as.package("C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction")
devtools::as.package("g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction")
devtools::as.package('g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction')
devtools::as.package('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction')*
devtools::as.package('C:/Users/g.benhmidene/Desktop/pmicrobiologyfunction/pmicrobiologyfunction')
devtools::as.package('C:\Users\g.benhmidene\Desktop\pmicrobiologyfunction\g.benhmidene\Desktop\pmicrobiologyfunction\pmicrobiologyfunction')
devtools::as.package('Users\g.benhmidene\Desktop\pmicrobiologyfunction\g.benhmidene\Desktop\pmicrobiologyfunction\pmicrobiologyfunction')
devtools::as.package('g.benhmidene\Desktop\pmicrobiologyfunction\g.benhmidene\Desktop\pmicrobiologyfunction\pmicrobiologyfunction')
function_coverage(Proba_T.R)
#' @param Tinf The theoritical cellular minimal temperature for growth #a number
#' @param Tsup The theoritical cellular maximal temperature for growth #a number
#' @param c a parameter #a number
#'
#' @return proba_T_Aug The single-cell growth probability, which increases from O to 1 when temperature value increases at a more favorable condition #a number
#' @export
#'
#' @examples
#' Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6) the values of Tinf,Tsup & c were imported from Augustin's 2012 review
#' Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6)
Proba_T<- function(T,Tinf,Tsup,c) {
proba_T_Aug<-c()
for (i in 1:length(T)) {
}
if (T[i]<=Tinf){
proba_T_Aug[i]=0
}
else
{if(T[i]>=Tsup){
proba_T_Aug[i]=1
}
else
proba_T_Aug[i]<-(exp(T[i]/c)-exp(Tinf/c))/(exp(Tsup/c)-exp(Tinf/c))
}
return(proba_T_Aug)
}
function_coverage(Proba_T.R)
function_coverage(test-Proba_T.R)
function_coverage(test-Proba_T.r)
function_coverage(Proba_T.R)
https://codecov.io/gh/Ghayabh/predictive-microbiology/compare/
covr::function_coverage(Proba_T)
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_T.R")
covr::file_coverage("R/Proba_T.R", "tests/testthat/test-Proba_T.R")
covr::function_coverage("R/Proba_T.R")
covr::function_coverage("R/Proba_T.R","tests/testthat/test-Proba_T.R")
covr::function_coverage("R/Proba_T","tests/testthat/test-Proba_T.R")
covr::function_coverage("Proba_T.R","tests/testthat/test-Proba_T.R")
?code_coverage
code_coverage("R/Proba_T.R","tests/testthat/test-Proba_T.R")
code_coverage("Proba_T.R","tests/testthat/test-Proba_T.R")
#' @param Tinf The theoritical cellular minimal temperature for growth #a number
#' @param Tsup The theoritical cellular maximal temperature for growth #a number
#' @param c a parameter #a number
#'
#' @return proba_T_Aug The single-cell growth probability, which increases from O to 1 when temperature value increases at a more favorable condition #a number
#' @export
#'
#' @examples
#' Proba_T(T=10,Tinf=-3.6,Tsup=17.3,c=7.6) the values of Tinf,Tsup & c were imported from Augustin's 2012 review
#' Proba_T(T=20,Tinf=-3.6,Tsup=17.3,c=7.6)
Proba_T<- function(T,Tinf,Tsup,c) {
proba_T_Aug<-c()
for (i in 1:length(T)) {
}
if (T[i]<=Tinf){
proba_T_Aug[i]=0
}
else
{if(T[i]>=Tsup){
proba_T_Aug[i]=1
}
else
proba_T_Aug[i]<-(exp(T[i]/c)-exp(Tinf/c))/(exp(Tsup/c)-exp(Tinf/c))
}
return(proba_T_Aug)
}
code_coverage("Proba_T.R","tests/testthat/test-Proba_T.R")
code_coverage("R/Proba_T.R","tests/testthat/test-Proba_T.R")
